{
  "data": {
    "id": 220393,
    "is_tutorial": false,
    "time_published": "2014-05-03T12:34:46+04:00",
    "time_interesting": "2014-05-03T14:35:46+04:00",
    "comments_count": 38,
    "score": null,
    "votes_count": 42,
    "favorites_count": 192,
    "tags_string": "php, symfony, reactphp, coroutines, asynchronous, composer",
    "title": "Ускоряем PHP (с ReactPHP)",
    "preview_html": "В этом посте я хотел бы поделиться не совсем обычным, для мира PHP, способе построения приложения, если угодно — архитектурой. Данный подход позволяет средствами PHP увеличить количество обрабатываемых запросов в разы. Так же я поделюсь своими наработками в этом направлении. Конечно данный подход не бесплатен, в плане требований к коду, но давайте всё по порядку.<br/>\r\n",
    "text_cut": "Читать дальше &rarr;",
    "text_html": "В этом посте я хотел бы поделиться не совсем обычным, для мира PHP, способе построения приложения, если угодно — архитектурой. Данный подход позволяет средствами PHP увеличить количество обрабатываемых запросов в разы. Так же я поделюсь своими наработками в этом направлении. Конечно данный подход не бесплатен, в плане требований к коду, но давайте всё по порядку.<br/>\r\n<a name=\"habracut\"></a><br/>\r\n<br/>\r\n<img src=\"http://habrastorage.org/getpro/habr/post_images/79e/f94/e24/79ef94e2465e2fde0102b29f03c44f78.png\"/><br/>\r\n<br/>\r\nДа, в конце мы получим прирост производительности в 30 раз по сравнению с обычным PHP и в 6 раз по сравнению с PHP + OPcache. Но с начала, хотел бы поговорить о существующих, популярных решениях по улучшению быстродействия PHP приложений.<br/>\r\n<br/>\r\n<h5>OPcache</h5><br/>\r\nБольшинство современных иснталяций используют APC/OPcache и это считается стандартом и максимум для PHP. У этого подхода наименьшее количество недостатков, т.к. это нативное (родное) решение предлагаемое нам командой PHP. Всё бы хорошо, но скорости маловато.<br/>\r\n<br/>\r\n<h5>HHVM</h5><br/>\r\nHHVM действительно хорош, для популярных Linux дистров уже есть репозитории и остаётся только поставить и настроить, что в целом дело не хитрое. Но это разработка от команды facebook и на данный момент, HHVM сильно ограничивает в выборе расширений, а если у вас вдруг свои патчи для PHP расширений то и вовсе ставит «крест» на безболезненном переходе с PHP на HHVM. Про PHP 5.5 так же можно забыть. Стоит отметить отличную работу facebook команды по увеличению совместимости HHVM с основными инструментами и фреймворками, но это цифра всё таки в районе 97%.<br/>\r\n<br/>\r\nИз приходящих мне в голову вариантов остаются еще сырой HippyVM и фреймворк PhalconPHP. О Phalcon написано много обзоров и думаю повторять их нет смысла. HippyVM в стадии разработки, кстати это альтернатива HHVM от самой же facebook команды, написан на python, что на мой взгляд делает этот проект еще более туманным.<br/>\r\n<br/>\r\nДругие варианты предлагайте в комментариях.<br/>\r\n<br/>\r\nКлассическая инсталляция PHP включает в себя установку одного из Nginx, Apache или Lighttpd веб сервера, которые обрабатывают входящие HTTP запросы и перенаправляют динамические к PHP. Существует несколько вариантов подключения PHP к веб серверу:<br/>\r\n<ul>\r\n<li>mod_php (apache)</li>\r\n<li>f(ast)cgi</li>\r\n<li>php-fpm</li>\r\n</ul><br/>\r\nВсе решения по ускорению PHP в целом направлены на ускорение медленного интерпретатора PHP в момент перенаправления запроса от веб сервера к скрипту, что, как видно по тестам быстродействия даёт свой результат. Но в данном решении есть недостаток, как ни крути, но на каждый запрос PHP приложению приходится объявлять классы, создавать экземпляры, подключаться к базам, читать кэш — инициализировать своё окружение. И как бы мы не ускоряли интерпретатор PHP, но на всю инициализацию тратится много ресурсов и такой подход явно далёк от желаемого, особенно для высоконагруженных решений. Почему так происходит? PHP был изначально сконструирован как язык шаблонов и набора инструментов, и не задумывался как самостоятельный веб сервер. К тому же в PHP нет параллельного выполнения или даже асинхронного как у node.js, а все написанные расширения блокирующие. <br/>\r\n<br/>\r\nНо PHP не стоит на месте. У нас появилась своя экосистема с тысячами инструментов которые легко можно установить благодаря Composer. PHP позаимствовал много патернов у таких языков как Java и других, привет команде Symfony & Co. Появились инструменты позволяющие работать PHP асинхронно. На эту тему уже есть <a href=\"http://habrahabr.ru/post/218751/\">статья на хабре</a>, по этому не буду повторятся в описании этого подхода. Скажу только, что асинхронный подход позволяет нам создавать не только чат на websocket, но и запускать полноценный HTTP сервер, а это значит что нам не придётся инициализировать PHP на каждый запрос. Таким образом, не сложно догадаться, что такой подход сведёт на нет затрачиваемое время на старт различных фреймворков и в конечном счёте улучшиться время отклика.<br/>\r\n<br/>\r\nДанное решение, как понятно из заголовка, построено на ReactPHP. Сам React это скорее инструмент для создания, а не готовое решение. Хотя в нём уже есть инструменты для обработки входящих Http соединений, а так же есть различные инструменты, например для работы с websockets или async redis, но нет реализованных привычных для современных фреймворков MVC патерна, роутинга и т.д. Для этих целей мы подключим ReactPHP к уже существующему Symfony2 приложению. <br/>\r\n<br/>\r\nReactPHP основывается на eventloop и для реализации этой архитектуры предлагает на выбор установить одну из ext-libevent, ext-libev, ext-event. В случае отказа, React работает через <a href=\"http://www.php.net/manual/en/function.stream-select.php\">stream_select</a> и возможности асинхронности сводятся к минимуму, т.к. по сути всё будет выполняться по очереди без возможности на прерывания процесса. Конечно, можно это опустить, т.к. по сути асинхронность, это и есть череда задач в пределах одного процесса. Но если функция будет использовать не блокирующие вызовы, то eventloop базирующийся на stream_select будет вынужден ждать выполнения этой функции, т.к. не возможности прервать функцию на время выполнения не блокирующего вызова, например к async-redis. Конечно это можно обойти разбиением функционала, но суть проблемы ясна. <br/>\r\n<br/>\r\nЯ сторонник нативных решений, и инсталляция pecl расширений туда не очень входит. К тому же установка pecl потребуется на всём парке серверов да и на хостингах будут проблемы. А ведь у PHP есть возможность реализации корутин средствами PHP 5.5. Благодаря замечательной <a href=\"http://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html\">статье от nikic</a> (<a href=\"http://habrahabr.ru/post/164173/\">перевод на хабре</a>), я решил впилить свою реализацию eventloop на основе описанного nikic планировщика задач. Да звучит не просто, и с непривычки действительно требует основательного изменения представления построения приложений на PHP. Но на мой взгляд за такими решениями будущее PHP.<br/>\r\n<br/>\r\nКстати Symfony был выбран не случайно. Реализация стека обработки входящих запросов Symfony, нам позволяет с лёгкостью работать не убивая PHP после каждого запроса. А пока я допиливал этот пост, <a href=\"https://github.com/symfony/symfony/issues/10810\">предложения с подобной реализацией</a> уже поступают на канале Symfony. И сами разработчики не скрывают, что подобное решение у них теплится в умах с начала запуска 2 версии.<br/>\r\n<br/>\r\nНо давайте перейдём от слов к делу. Для начала нам потребуется ваш любимый Linux дистрибутив с установленными и настроенными nginx, php-cli 5.5.x, composer и вашим приложением на Symfony. Если у вас нет под рукой Symfony приложения, то можно взять голую инсталляцию с Symfony сайта, на которой и будет приведён пример. Если вам и composer не знаком, то вкратце можно ознакомится в <a href=\"http://habrahabr.ru/post/197666/\">моей статье к Satis</a>.<br/>\r\n<br/>\r\nСоздаём новую папку, если проект уже есть то заходим в него:<br/>\r\n<pre><code class=\"bash\">mkdir fastapp && cd fastapp\n</code></pre><br/>\r\nУстанавливаем composer:<br/>\r\n<pre><code class=\"bash\">curl -sS https://getcomposer.org/installer | php\n</code></pre><br/>\r\nСтавим Symfony2.4.4:<br/>\r\n<pre><code class=\"bash\">php composer.phar create-project symfony/framework-standard-edition symfdir/ 2.4.4 && mv symfdir/* ./ && rm -fr symfdir\n</code></pre><br/>\r\n<div class=\"spoiler\"><b class=\"spoiler_title\">Получаем</b><div class=\"spoiler_text\"><pre><code class=\"bash\">ls -l\n\ndrwxrwxr-x  6 user user 4.0K Apr 30 11:25 app/\ndrwxrwxr-x  2 user user 4.0K Apr 30 11:25 bin/\ndrwxrwxr-x  3 user user 4.0K Mar 14 09:37 src/\ndrwxrwxr-x 13 user user 4.0K Apr 30 11:25 vendor/\ndrwxrwxr-x  3 user user 4.0K Apr 30 11:25 web/\n-rw-rw-r--  1 user user 2.0K Mar 14 09:37 composer.json\n-rw-rw-r--  1 user user  56K Apr 30 11:25 composer.lock\n-rwxr-xr-x  1 user user 990K Apr 30 11:23 composer.phar*\n-rw-rw-r--  1 user user 1.1K Mar 14 09:37 LICENSE\n-rw-rw-r--  1 user user 5.7K Mar 14 09:37 README.md\n-rw-rw-r--  1 user user 1.3K Mar 14 09:37 UPGRADE-2.2.md\n-rw-rw-r--  1 user user 2.0K Mar 14 09:37 UPGRADE-2.3.md\n-rw-rw-r--  1 user user  356 Mar 14 09:37 UPGRADE-2.4.md\n-rw-rw-r--  1 user user 8.3K Mar 14 09:37 UPGRADE.md\n</code></pre><br/>\r\n</div></div><br/>\r\nДобавляем такие строчки в ваш composer.json:<br/>\r\n<pre><code class=\"javascript\">{\n    &quot;repositories&quot;: [\n        { &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http://github.com/Imunhatep/rephp&quot; },\n        { &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http://github.com/Imunhatep/php-pm&quot; }\n    ],\n    &quot;minimum-stability&quot;: &quot;dev&quot;,\n    &quot;prefer-stable&quot;: true,\n    &quot;require&quot;: {\n        &quot;imunhatep/php-pm&quot;: &quot;@dev&quot;\n    }\n}\n</code></pre><br/>\r\n<div class=\"spoiler\"><b class=\"spoiler_title\">Чтоб выглядело примерно так</b><div class=\"spoiler_text\"><pre><code class=\"javascript\">{\n    &quot;name&quot;: &quot;symfony/framework-standard-edition&quot;,\n    &quot;license&quot;: &quot;MIT&quot;,\n    &quot;type&quot;: &quot;project&quot;,\n    &quot;description&quot;: &quot;The \\&quot;Symfony Standard Edition\\&quot; distribution&quot;,\n    &quot;autoload&quot;: {\n        &quot;psr-0&quot;: { &quot;&quot;: &quot;src/&quot; }\n    },\n    &quot;repositories&quot;: [\n        { &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http://github.com/Imunhatep/rephp&quot; },\n        { &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http://github.com/Imunhatep/php-pm&quot; }\n    ],\n    &quot;minimum-stability&quot;: &quot;dev&quot;,\n    &quot;prefer-stable&quot;: true,\n    &quot;require&quot;: {\n        &quot;php&quot;: &quot;&gt;=5.3.3&quot;,\n        &quot;symfony/symfony&quot;: &quot;~2.4&quot;,\n        &quot;doctrine/orm&quot;: &quot;~2.2,&gt;=2.2.3&quot;,\n        &quot;doctrine/doctrine-bundle&quot;: &quot;~1.2&quot;,\n        &quot;twig/extensions&quot;: &quot;~1.0&quot;,\n        &quot;symfony/assetic-bundle&quot;: &quot;~2.3&quot;,\n        &quot;symfony/swiftmailer-bundle&quot;: &quot;~2.3&quot;,\n        &quot;symfony/monolog-bundle&quot;: &quot;~2.4&quot;,\n        &quot;sensio/distribution-bundle&quot;: &quot;~2.3&quot;,\n        &quot;sensio/framework-extra-bundle&quot;: &quot;~3.0&quot;,\n        &quot;sensio/generator-bundle&quot;: &quot;~2.3&quot;,\n        &quot;incenteev/composer-parameter-handler&quot;: &quot;~2.0&quot;,\n        &quot;imunhatep/php-pm&quot;: &quot;@dev&quot;\n    },\n    &quot;scripts&quot;: {\n        &quot;post-install-cmd&quot;: [\n            &quot;Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile&quot;\n        ],\n        &quot;post-update-cmd&quot;: [\n            &quot;Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets&quot;,\n            &quot;Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile&quot;\n        ]\n    },\n    &quot;config&quot;: {\n        &quot;bin-dir&quot;: &quot;bin&quot;\n    },\n    &quot;extra&quot;: {\n        &quot;symfony-app-dir&quot;: &quot;app&quot;,\n        &quot;symfony-web-dir&quot;: &quot;web&quot;,\n        &quot;incenteev-parameters&quot;: {\n            &quot;file&quot;: &quot;app/config/parameters.yml&quot;\n        },\n        &quot;branch-alias&quot;: {\n            &quot;dev-master&quot;: &quot;2.4-dev&quot;\n        }\n    }\n}\n</code></pre><br/>\r\n</div></div><br/>\r\nЗапускаем обновление пакетов:<br/>\r\n<pre><code class=\"bash\">php composer.phar update\n</code></pre><br/>\r\n<div class=\"spoiler\"><b class=\"spoiler_title\">Получаем</b><div class=\"spoiler_text\"><pre><code class=\"bash\">Loading composer repositories with package information\nUpdating dependencies (including require-dev)         \n  - Installing stack/builder (v1.0.1)\n    Loading from cache\n\n  - Installing react/promise (v2.0.0)\n    Loading from cache\n\n  - Installing guzzle/parser (v3.9.0)\n    Loading from cache\n\n  - Installing evenement/evenement (v2.0.0)\n    Loading from cache\n\n  - Installing react/react (v0.4.1)\n    Loading from cache\n\n  - Installing imunhatep/rephp (dev-master 13adf26)\n    Cloning 13adf2697681a5954978ac56fe2c8fdf6a21dc4a\n\n  - Installing imunhatep/php-pm (dev-master 02f44ec)\n    Cloning 02f44ecb41ca5b4c81d4bb6087da7a0ed4964656\n\n\nreact/react suggests installing ext-libevent (Allows for use of a more performant event-loop implementation.)\nreact/react suggests installing ext-libev (Allows for use of a more performant event-loop implementation.)\nreact/react suggests installing ext-event (Allows for use of a more performant event-loop implementation.)\nWriting lock file\nGenerating autoload files\nUpdating the &quot;app/config/parameters.yml&quot; file\nClearing the cache for the dev environment with debug true\nInstalling assets using the hard copy option\nInstalling assets for Symfony\\Bundle\\FrameworkBundle into web/bundles/framework\nInstalling assets for Acme\\DemoBundle into web/bundles/acmedemo\nInstalling assets for Sensio\\Bundle\\DistributionBundle into web/bundles/sensiodistribution\n</code></pre><br/>\r\n</div></div><br/>\r\nПодготавливаем Symfony cache:<br/>\r\n<pre><code class=\"bash\">php app/console cache:warmup --env=dev\n</code></pre><br/>\r\nИ запускаем веб сервер, пока средствами только PHP и в одном экземпляре, тестовый так сказать. Порт можно подобрать по вкусу:<br/>\r\n<pre><code class=\"bash\">php bin/ppm start --workers 1 --port 8080\n</code></pre><br/>\r\nПроверяем, что всё работает открыв в любимом браузере localhost:8080. Должна открыться страничка приветствия от Symfony, правда картинки не покажутся и css неподгрузится. Таким образом мы получили PHP веб сервер, обрабатывающий и входящие запросы и не умирающий. Но у нас только 1 процесс, нет обработки статики и нет балансера. Как многие догадались, для этого нам и понадобится nginx.<br/>\r\n<br/>\r\n<img src=\"http://habrastorage.org/getpro/habr/post_images/5f0/0e4/27d/5f00e427db83543699b005e21b692514.jpg\"/><br/>\r\nНастраиваем nginx для проксирования динамических запросов на наш PHP сервер, попутно выполняя роль балансера, а статику отдавать без участия PHP:<br/>\r\n<pre><code class=\"bash\">upstream backend  {\n    server 127.0.0.1:5501;\n    server 127.0.0.1:5502;\n    server 127.0.0.1:5503;\n    server 127.0.0.1:5504;\n    server 127.0.0.1:5505;\n    server 127.0.0.1:5506;\n    server 127.0.0.1:5507;\n    server 127.0.0.1:5508;\n}\n\nserver {\n    root /path/to/symfony/web/;\n    server_name fastapp.com;\n\n    location / {\n                # try to serve file directly, fallback to rewrite\n                try_files $uri @rewriteapp;\n        }\n\n        location @rewriteapp {\n                if (!-f $request_filename) {\n                        proxy_pass http://backend;\n                        break;\n                }\n        }\n}\n</code></pre><br/>\r\nПри этом server_name (fastapp.com) нужно прописать в /etc/hosts:<br/>\r\n<pre><code class=\"bash\">127.0.0.1   fastapp.com\n</code></pre><br/>\r\nТеперь чтоб нам не мучиться с ручным запуском n-количества процессов нашего PHP приложения (представленная nginx конф. настроена на n=8), заходим в папку нашего проекта и выполняем:<br/>\r\n<pre><code class=\"bash\">cp vendor/imunhatep/rephp/ppm.json ./\n</code></pre><br/>\r\nПодправляем ./ppm.json файлик:<br/>\r\n<pre><code class=\"javascript\">{\n        &quot;bootstrap&quot;: &quot;\\\\PHPPM\\\\Bootstraps\\\\Symfony&quot;,\n        &quot;bridge&quot;: &quot;HttpKernel&quot;,\n        &quot;appenv&quot;: &quot;dev&quot;,\n        &quot;workers&quot;: 8,\n        &quot;port&quot;: 5501\n}\n</code></pre><br/>\r\nИногда после изменений требуется обновить кэш, возможно это только в моём случае, т.к. при написании статьи производил изменения в коде:<br/>\r\n<pre><code class=\"bash\">app/console cache:warmup --env=dev\n</code></pre><br/>\r\nЗаново запускаем наш PHP Process Manager:<br/>\r\n<pre><code class=\"bash\">php bin/ppm start\n</code></pre><br/>\r\nПолучаем в ответ:<br/>\r\n<pre><code class=\"bash\">8 slaves (5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508) up and ready.\n</code></pre><br/>\r\nСначала проверяем в браузере линк localhost:5501, если всё открылось то пробуем открыть fastapp.com. Должно всё открываться, с картинками и css.<br/>\r\n<br/>\r\nТеперь можно жечь при помощи тулзы siege или ab, на выбор:<br/>\r\n<pre><code class=\"bash\">siege -qb -t 30S -c 128 http://fastapp.com/\n</code></pre><br/>\r\nПриведу несколько результатов тестирования своего (не helloworld) Symfony приложения, на девелоперской машине с AMD 8core, 8RAM и Fedora20.<br/>\r\n<h5>Php 5.5.10, через nginx + php-fpm:</h5><br/>\r\n<pre><code class=\"bash\">siege -qb -t 30S -c 128 http://login.dev/signup\n\nLifting the server siege...      done.\n\nTransactions:                 983 hits\nAvailability:              100.00 %\nElapsed time:               29.03 secs\nData transferred:            4.57 MB\nResponse time:                0.91 secs\nTransaction rate:           34.26 trans/sec\nThroughput:                0.16 MB/sec\nConcurrency:               124.23\nSuccessful transactions:         983\nFailed transactions:               0\nLongest transaction:            1.81\nShortest transaction:            0.42\n</code></pre><br/>\r\n<h5>Php 5.5.10 с включенным OPcache, через nginx + php-fpm:</h5><br/>\r\n<pre><code class=\"bash\">siege -qb -t 30S -c 128 http://login.dev/signup\nLifting the server siege...      done.\n\nTransactions:                5298 hits\nAvailability:              100.00 %\nElapsed time:               29.54 secs\nData transferred:           24.15 MB\nResponse time:                0.70 secs\nTransaction rate:          179.35 trans/sec\nThroughput:                0.82 MB/sec\nConcurrency:              126.43\nSuccessful transactions:        5298\nFailed transactions:               0\nLongest transaction:            1.68\nShortest transaction:            0.07\n</code></pre><br/>\r\n<h5>Php 5.5.10 с включенным OPcache, через nginx + ReactPHP + Coroutine eventloop:</h5><br/>\r\n<pre><code class=\"bash\">siege -qb -t 30S -c 128 http://fastlogin.dev/signup\nLifting the server siege...      done.\n\nTransactions:               30553 hits\nAvailability:              100.00 %\nElapsed time:               29.85 secs\nData transferred:          157.63 MB\nResponse time:                0.12 secs\nTransaction rate:         1023.55 trans/sec\nThroughput:                5.28 MB/sec\nConcurrency:              127.43\nSuccessful transactions:       30553\nFailed transactions:               0\nLongest transaction:            0.76\nShortest transaction:            0.00\n</code></pre><br/>\r\nУвеличиваем количество параллельных запросов до 256.<br/>\r\n<h5>Php 5.5.10 с включенным OPcache, через nginx + php-fpm</h5><br/>\r\n<pre><code class=\"bash\">siege -qb -t 30S -c 256 http://login.dev/signup\n\nsiege aborted due to excessive socket failure;\n\nTransactions:                 134 hits\nAvailability:               10.48 %\nElapsed time:                1.58 secs\nData transferred:            0.78 MB\nResponse time:                1.21 secs\nTransaction rate:           84.81 trans/sec\nThroughput:                0.49 MB/sec\nConcurrency:              102.93\nSuccessful transactions:         134\nFailed transactions:            1145\nLongest transaction:            1.56\nShortest transaction:            0.00\n</code></pre><br/>\r\nК сожалению php-fpm свалился и отказался работать с лимитом в 32 процесса против 256 параллельных запросов. <br/>\r\n<h5>Пробуем Php5.5.10 + ReactPHP + Coroutine eventloop</h5><br/>\r\n<pre><code class=\"bash\">siege -qb -t 30S -c 256 http://fastlogin.dev/signup\n\nLifting the server siege...      done.\n\nTransactions:               29154 hits\nAvailability:              100.00 %\nElapsed time:               29.16 secs\nData transferred:          150.40 MB\nResponse time:                0.25 secs\nTransaction rate:          999.79 trans/sec\nThroughput:                5.16 MB/sec\nConcurrency:              252.70\nSuccessful transactions:       29154\nFailed transactions:               0\nLongest transaction:            3.66\nShortest transaction:            0.00\n</code></pre><br/>\r\n<h4>Заключение.</h4><br/>\r\nИдея запускать Symfony приложения через ReactPHP не моя, позаимствовал у <a href=\"http://marcjschmidt.de/blog/2014/02/08/php-high-performance.html\">Marc из его статьи</a>, за что ему большое спасибо. Кстати он делал свои замеры и даже сравнивал с HHVM. Ниже приведён график из его статьи:<br/>\r\n<img src=\"http://habrastorage.org/getpro/habr/post_images/201/65a/9e8/20165a9e8635357c2cf2faab1c3b5bd6.png\"/><br/>\r\nМой вклад заключается в создании eventloop на основе работы nikic и допиливании менеджера процессов до, в целом, работоспособности, а также нюансов запуска ReactPHP с новым eventloop. Возможно с pecl event lib, будет это всё работать быстрее, не проверял. К сожалению мои текущие проекты не соответствуют требуемому качеству кода, вот наработка и пылится на полках «лаборатории», т.к. такой подход требует кода без ошибок. То есть PHP, по сути, не имеет права падать, а всеядность и динамика PHP ни как этому не способствует. Это можно исправить, дописав PHP PM, чтоб перезапускал упавшие процессы, а так же можно дописать отслеживание изменений в коде и также перезапускать процессы. Но пока не востребовано. Так же на этой базе можно запускать и websocket сервер. Что было в планах, но так там и осталось.<br/>\r\n<br/>\r\nОставлял такой сервер на все выходные под нагрузкой, утечек памяти не было. Есть одна проблема которую пока нет ни времени ни необходимости искать: по каким то причинам, после нагрузки, остаются не закрытыми 1-2 соединения. На малых нагрузка выявить причину не удаётся, а для больших нужно потратить время чтоб придумать как выявить причину. Пока что, добавил таймер, которые каждые 10 секунд проверяет текущие соединения на валидность (ресурс, не ресурс) и убивает мёртвые. <br/>\r\n<br/>\r\nЕще стоит отметить, что приложение, в идеале, должно учитывать новые возможности асинхронности и прерывания (yield), а не выполнятся монолитно. Так же хорошо бы использовать не блокирующий функционал.",
    "is_recovery_mode": false,
    "hubs": [
      {
        "count_posts": 475,
        "count_subscribers": 85498,
        "is_profiled": true,
        "rating": 90.2726,
        "alias": "hi",
        "title": "Высокая производительность",
        "tags_string": "high perfomance, highload, high load, hpc, high performance computing",
        "about": "Здесь обсуждаются методы получения высокой производительности веб-систем.",
        "is_membership": true,
        "is_company": false
      },
      {
        "count_posts": 1534,
        "count_subscribers": 91305,
        "is_profiled": true,
        "rating": 140.6746,
        "alias": "php",
        "title": "PHP",
        "tags_string": "PHP, Hypertext Preprocessor, Personal Home Page Tools",
        "about": "Блог для обмена опытом",
        "is_membership": true,
        "is_company": false
      },
      {
        "count_posts": 153,
        "count_subscribers": 62504,
        "is_profiled": true,
        "rating": 11.2,
        "alias": "symfony",
        "title": "Symfony",
        "tags_string": "symfony, symfony framework, symfony2, symfony2 framework, symfony 2, twig",
        "about": "Заметки, новости, ссылки, дискуссии, касающиеся <a href=\"http://www.symfony-project.org/\">symfony framework</a> во всех его проявлениях. Вы написали полезный плагин? Или создали веб-проект, используя symfony? Может, вы хотите просто узнать больше об этом framework'e? Тогда вам сюда.",
        "is_membership": true,
        "is_company": false
      }
    ],
    "reading_count": 11704,
    "author": {
      "id": 141301,
      "login": "Casus",
      "time_registered": "2012-01-05T18:32:27+04:00",
      "score": 11,
      "fullname": "Артём",
      "sex": 1,
      "rating": 27.9,
      "vote": 0,
      "rating_position": 2111,
      "geo": {
        "country": "Латвия",
        "region": "Латвия",
        "city": "Рига"
      },
      "counters": {
        "posts": 6,
        "comments": 124,
        "followed": 1,
        "followers": 0
      },
      "badges": [
        {
          "alias": "habred",
          "title": "Захабренный",
          "plural": "Захабренные",
          "description": "Пользователь с кармой >0."
        }
      ],
      "avatar": "http://habrastorage.org/getpro/habr/avatars/b68/2cd/54a/b682cd54a2d6298380717439e2a8644e.jpg",
      "is_readonly": false
    },
    "has_polls": false,
    "url": "http://habrahabr.ru/post/220393",
    "post_type": 1,
    "post_type_str": "simple",
    "vote": null,
    "is_can_vote": false,
    "is_habred": true,
    "is_interesting": true,
    "is_favorite": false,
    "comments_new": 0
  },
  "server_time": "2014-05-04T15:39:43+04:00"
}
